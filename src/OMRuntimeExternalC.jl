module OMRuntimeExternalC

import Glob
const INSTALLATION_DIRECTORY_PATH = realpath(realpath(dirname(Base.find_package("OMRuntimeExternalC")) * "/../"))
@show INSTALLATION_DIRECTORY_PATH
#Shared path
const SHARED_DIRECTORY_PATH = realpath(string(INSTALLATION_DIRECTORY_PATH, "/lib/ext"))
@show SHARED_DIRECTORY_PATH

"""
  This function finds libraries built by the user or by the CI
"""
function locateSharedParserLibrary(directoryToSearchIn, libraryName, relativeDirectory)
  local res = Glob.glob("*",  joinpath(directoryToSearchIn, relativeDirectory))
  local results = []
  local fullLibName = "lib"
  local ext = ""
  for p in res
    push!(results, Glob.glob("*",  joinpath(directoryToSearchIn, p)))
  end
  #= Locate DLL =#
  ext = if Sys.islinux()
    ".so"
  elseif Sys.iswindows()
    ".dll"
  else #= assume apple =#
    ".dylib"
  end
  fullLibName = fullLibName * libraryName * ext
  @show fullLibName
  for r in results
    for p in r
      if occursin(fullLibName, p)
        @show p
        return p
      end
    end
  end
  nothing
end

const _libpath = locateSharedParserLibrary(INSTALLATION_DIRECTORY_PATH, "ModelicaStandardTables", "lib")
@show _libpath
const libpath = locateSharedParserLibrary(SHARED_DIRECTORY_PATH, "ModelicaStandardTables", "shared")
@show libpath

#= If there exists a prebuilt library we use that. Otherwise we use the precompiled binary generated by Pkg.build =#
const installedLibPath = if _libpath !== nothing
    _libpath
  else
    if libpath === nothing
      throw("Could not find the ModelicaStandardTables library")
    end
    libpath
end

@show installedLibPath

const _libPathlibOpenModelicaRuntimeC = locateSharedParserLibrary(INSTALLATION_DIRECTORY_PATH, "OpenModelicaRuntimeC", "lib")
const libPathlibOpenModelicaRuntimeC = locateSharedParserLibrary(SHARED_DIRECTORY_PATH, "OpenModelicaRuntimeC", "shared")

const installedLibPathlibOpenModelicaRuntimeC = if _libPathlibOpenModelicaRuntimeC !== nothing
  _libPathlibOpenModelicaRuntimeC
else
  if libPathlibOpenModelicaRuntimeC === nothing
    throw("omc runtime not found")
  end
  libPathlibOpenModelicaRuntimeC
end

const _libPathlibSimulationRuntimeC = locateSharedParserLibrary(INSTALLATION_DIRECTORY_PATH, "SimulationRuntimeC", "lib")
const libPathlibSimulationRuntimeC = locateSharedParserLibrary(SHARED_DIRECTORY_PATH, "SimulationRuntimeC", "shared")
const installedLibPathlibSimulationRuntimeC = if _libPathlibSimulationRuntimeC !== nothing
  _libPathlibSimulationRuntimeC
else
  if libPathlibSimulationRuntimeC === nothing
    throw("omc sim runtime not found")
  end
  libPathlibSimulationRuntimeC
end

const _libPathlibModelicaIO = locateSharedParserLibrary(INSTALLATION_DIRECTORY_PATH, "ModelicaIO", "lib")
const libPathlibModelicaIO = locateSharedParserLibrary(SHARED_DIRECTORY_PATH, "ModelicaIO", "shared")
const installedLibPathlibModelicaIO = if _libPathlibModelicaIO !== nothing
  _libPathlibModelicaIO
else
  if libPathlibModelicaIO === nothing
    throw("omc sim runtime not found")
  end
  libPathlibModelicaIO
end

const _libPathlibModelicaExternalC = locateSharedParserLibrary(INSTALLATION_DIRECTORY_PATH, "ModelicaExternalC", "lib")
const libPathlibModelicaExternalC = locateSharedParserLibrary(SHARED_DIRECTORY_PATH, "ModelicaExternalC", "shared")
const installedLibPathlibModelicaExternalC = if _libPathlibModelicaExternalC !== nothing
  _libPathlibModelicaExternalC
else
  if libPathlibModelicaExternalC === nothing
    throw("omc sim runtime not found")
  end
  libPathlibModelicaExternalC
end

function __init__()
  local sep = Sys.iswindows() ? ';' : ':'
  Base._setenv("PATH", ENV["PATH"] * sep * splitdir(installedLibPath)[1])
  nothing
end

#= Include API functions =#
include("api.jl")

end #= OMRuntimeExternalC =#
